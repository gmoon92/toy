package com.gmoon.dbcleaner.global.persistence.datasource;

import lombok.RequiredArgsConstructor;
import lombok.experimental.Delegate;
import lombok.extern.slf4j.Slf4j;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

@Slf4j
@RequiredArgsConstructor
public class DataSourceProxy implements DataSource, RedefineDataSource {

	@Delegate(excludes = RedefineDataSource.class)
	private final DataSource dataSource;

	@RequiredArgsConstructor
	static class ConnectionProxy implements Connection, RedefineConnection {

		@Delegate(excludes = RedefineConnection.class)
		private final Connection connection;

		@Override
		public PreparedStatement prepareStatement(String sql) throws SQLException {
			log.info("prepareStatement... {}", sql); // todo check
			return connection.prepareStatement(sql);
		}

		@Override
		public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
			log.info("prepareStatement... {}", sql);
			return connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
		}

		@Override
		public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
			log.info("prepareStatement... {}", sql);
			return connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
		}

		@Override
		public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
			log.info("prepareStatement... {}", sql);  // todo check
			return connection.prepareStatement(sql, autoGeneratedKeys);
		}

		@Override
		public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
			log.info("prepareStatement... {}", sql);
			return connection.prepareStatement(sql, columnIndexes);
		}

		@Override
		public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
			log.info("prepareStatement... {}", sql);
			return connection.prepareStatement(sql, columnNames);
		}
	}

	@Override
	public Connection getConnection() throws SQLException {
		Connection connection = dataSource.getConnection();
		return new ConnectionProxy(connection);
	}

	@Override
	public Connection getConnection(String username, String password) throws SQLException {
		Connection connection = dataSource.getConnection(username, password);
		return new ConnectionProxy(connection);
	}
}
