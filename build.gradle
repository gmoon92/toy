plugins {
    id "java"
    id "org.springframework.boot" version "3.5.0" apply false
    id "io.spring.dependency-management" version "1.1.7" apply false
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
}

// ext: Gradle의 확장 속성 시스템, Extra properties extension
ext {
    springBootVersion = "3.5.0"

    // #[jdbc.driver]
    JDBC_H2_DRIVER = "org.h2.Driver"
    JDBC_MARIADB_DRIVER = "org.mariadb.jdbc.Driver"
    JDBC_MYSQL_DRIVER = "com.mysql.cj.jdbc.Driver"

    // #[hibernate.direct]
    HIBERNATE_DIALECT_H2 = "org.hibernate.dialect.H2Dialect"
    HIBERNATE_DIALECT_MYSQL = "org.hibernate.dialect.MySQLDialect"
    HIBERNATE_DIALECT_MARIADB = "org.hibernate.dialect.MariaDBDialect"
}

/**
 * QueryDSL Q 도메인 클래스 코드 생성 설정 공통화(Closure 유형 ext 속성)
 *
 * - 루트 build.gradle의 ext에 정의하여 전체 모듈에서 적용 가능.
 * - 서브 모듈에서는 applyQuerydslQDomainCodeGen(project) 형태로 호출.
 *   - 만약 네이밍 오버라이드 등 변수 충돌 우려시에는
 *     project.applyQuerydslQDomainCodeGen.call(project) 형태로 명확하게 지정할 것.
 * - 추후, 커스텀 Gradle Task나 플러그인 등록 등 빌드 자동화 확장이 필요한 경우
 *   코드 구조의 확장성도 고려.
 *
 * @param project : 설정을 적용할 대상 Gradle Project 객체
 */
ext.applyQuerydslQDomainCodeGen = { project ->
    String generatedDir = "${project.projectDir}/build/generated"

    project.tasks.named("clean") {
        delete project.file(generatedDir)
    }

    project.tasks.withType(JavaCompile).configureEach {
        options.generatedSourceOutputDirectory = project.file(generatedDir)
    }

    // IDE 자동 인식 용
    project.sourceSets.main.java.srcDirs += [generatedDir]

    project.dependencies {
        annotationProcessor("${libs.querydsl.apt.get()}:jakarta")
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    }
}

java {
    // 소스/클래스 JDK 파일 버전 지정
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// `allprojects`: 루트와 모든 서브프로젝트에 적용
allprojects {
    group = "com.gmoon.toy"
    version = "1.0.0-SNAPSHOT"

    // 파일 인코딩 설정 (sourceEncoding 등)
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    tasks.named("test") {
        useJUnitPlatform()
    }

    repositories {
        mavenCentral()
    }

    apply plugin: "java"
    // 소스/클래스 JDK 파일 버전 지정
//    sourceCompatibility = JavaVersion.VERSION_21
//    targetCompatibility = JavaVersion.VERSION_21
}

// subprojects: 서브프로젝트에만 적용
subprojects {
    dependencies {
        // 공통 라이브러리 추가
        implementation("org.springframework.boot:spring-boot-starter")
        testImplementation("org.springframework.boot:spring-boot-starter-test")

        implementation(libs.apache.commons.lang3)

        implementation("org.projectlombok:lombok")
//        compileOnly("org.projectlombok:lombok")
//        testCompileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok")

        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    }
}
