plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
}

group = 'com.gmoon.spring-event.spring-quartz-cluster'
description = 'spring-quartz-cluster'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.boot:spring-boot-starter-quartz'

    // persistence
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation libs.jdbc.mysql
    implementation libs.hibernate.envers

    // querydsl
    implementation("${libs.querydsl.jpa.get()}:jakarta")
//    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor("${libs.querydsl.apt.get()}:jakarta")
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // etc
    implementation project(':java-core')

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation libs.jdbc.h2
}

// ===============Spring 3.X Querydsl gradle setup===============
def querydslSrcDir = "$projectDir/build/generated"
tasks.named('clean') {
    // clean 시점에 QClass 디렉토리 삭제
    delete file(querydslSrcDir)
}

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}
// ===============Spring 3.X Querydsl gradle setup===============

