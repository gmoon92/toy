/*
 * This file is generated by jOOQ.
 */
package com.gmoon.springjooq.global.jooqschema.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.gmoon.springjooq.global.jooqschema.Keys;
import com.gmoon.springjooq.global.jooqschema.Public;
import com.gmoon.springjooq.global.jooqschema.tables.records.TbAccessLogRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16",
        "schema version:V1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbAccessLog extends TableImpl<TbAccessLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.TB_ACCESS_LOG</code>
     */
    public static final TbAccessLog TB_ACCESS_LOG = new TbAccessLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbAccessLogRecord> getRecordType() {
        return TbAccessLogRecord.class;
    }

    /**
     * The column <code>PUBLIC.TB_ACCESS_LOG.ID</code>.
     */
    public final TableField<TbAccessLogRecord, String> ID = createField(DSL.name("ID"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TB_ACCESS_LOG.ATTEMPT_DT</code>.
     */
    public final TableField<TbAccessLogRecord, LocalDateTime> ATTEMPT_DT = createField(DSL.name("ATTEMPT_DT"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>PUBLIC.TB_ACCESS_LOG.IP</code>.
     */
    public final TableField<TbAccessLogRecord, String> IP = createField(DSL.name("IP"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.TB_ACCESS_LOG.OS</code>.
     */
    public final TableField<TbAccessLogRecord, String> OS = createField(DSL.name("OS"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>PUBLIC.TB_ACCESS_LOG.USERNAME</code>.
     */
    public final TableField<TbAccessLogRecord, String> USERNAME = createField(DSL.name("USERNAME"), SQLDataType.VARCHAR(50), this, "");

    private TbAccessLog(Name alias, Table<TbAccessLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbAccessLog(Name alias, Table<TbAccessLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.TB_ACCESS_LOG</code> table reference
     */
    public TbAccessLog(String alias) {
        this(DSL.name(alias), TB_ACCESS_LOG);
    }

    /**
     * Create an aliased <code>PUBLIC.TB_ACCESS_LOG</code> table reference
     */
    public TbAccessLog(Name alias) {
        this(alias, TB_ACCESS_LOG);
    }

    /**
     * Create a <code>PUBLIC.TB_ACCESS_LOG</code> table reference
     */
    public TbAccessLog() {
        this(DSL.name("TB_ACCESS_LOG"), null);
    }

    public <O extends Record> TbAccessLog(Table<O> child, ForeignKey<O, TbAccessLogRecord> key) {
        super(child, key, TB_ACCESS_LOG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TbAccessLogRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    @Override
    public List<UniqueKey<TbAccessLogRecord>> getKeys() {
        return Arrays.<UniqueKey<TbAccessLogRecord>>asList(Keys.CONSTRAINT_5);
    }

    @Override
    public TbAccessLog as(String alias) {
        return new TbAccessLog(DSL.name(alias), this);
    }

    @Override
    public TbAccessLog as(Name alias) {
        return new TbAccessLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbAccessLog rename(String name) {
        return new TbAccessLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbAccessLog rename(Name name) {
        return new TbAccessLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, LocalDateTime, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
