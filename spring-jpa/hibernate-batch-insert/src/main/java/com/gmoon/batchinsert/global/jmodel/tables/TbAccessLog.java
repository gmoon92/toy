/*
 * This file is generated by jOOQ.
 */
package com.gmoon.batchinsert.global.jmodel.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.gmoon.batchinsert.global.jmodel.Batchinsert;
import com.gmoon.batchinsert.global.jmodel.Keys;
import com.gmoon.batchinsert.global.jmodel.tables.records.TbAccessLogRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(
	 value = {
		  "https://www.jooq.org",
		  "jOOQ version:3.14.16",
		  "schema version:3"
	 },
	 comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TbAccessLog extends TableImpl<TbAccessLogRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>batchinsert.tb_access_log</code>
	 */
	public static final TbAccessLog TB_ACCESS_LOG = new TbAccessLog();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TbAccessLogRecord> getRecordType() {
		return TbAccessLogRecord.class;
	}

	/**
	 * The column <code>batchinsert.tb_access_log.id</code>.
	 */
	public final TableField<TbAccessLogRecord, String> ID = createField(DSL.name("id"),
		 SQLDataType.VARCHAR(50).nullable(false), this, "");

	/**
	 * The column <code>batchinsert.tb_access_log.username</code>.
	 */
	public final TableField<TbAccessLogRecord, String> USERNAME = createField(DSL.name("username"),
		 SQLDataType.VARCHAR(50).nullable(false), this, "");

	/**
	 * The column <code>batchinsert.tb_access_log.ip</code>.
	 */
	public final TableField<TbAccessLogRecord, String> IP = createField(DSL.name("ip"),
		 SQLDataType.VARCHAR(100).nullable(false), this, "");

	/**
	 * The column <code>batchinsert.tb_access_log.os</code>.
	 */
	public final TableField<TbAccessLogRecord, String> OS = createField(DSL.name("os"),
		 SQLDataType.VARCHAR(30).nullable(false), this, "");

	/**
	 * The column <code>batchinsert.tb_access_log.attempt_dt</code>.
	 */
	public final TableField<TbAccessLogRecord, LocalDateTime> ATTEMPT_DT = createField(DSL.name("attempt_dt"),
		 SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

	private TbAccessLog(Name alias, Table<TbAccessLogRecord> aliased) {
		this(alias, aliased, null);
	}

	private TbAccessLog(Name alias, Table<TbAccessLogRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>batchinsert.tb_access_log</code> table reference
	 */
	public TbAccessLog(String alias) {
		this(DSL.name(alias), TB_ACCESS_LOG);
	}

	/**
	 * Create an aliased <code>batchinsert.tb_access_log</code> table reference
	 */
	public TbAccessLog(Name alias) {
		this(alias, TB_ACCESS_LOG);
	}

	/**
	 * Create a <code>batchinsert.tb_access_log</code> table reference
	 */
	public TbAccessLog() {
		this(DSL.name("tb_access_log"), null);
	}

	public <O extends Record> TbAccessLog(Table<O> child, ForeignKey<O, TbAccessLogRecord> key) {
		super(child, key, TB_ACCESS_LOG);
	}

	@Override
	public Schema getSchema() {
		return Batchinsert.BATCHINSERT;
	}

	@Override
	public UniqueKey<TbAccessLogRecord> getPrimaryKey() {
		return Keys.KEY_TB_ACCESS_LOG_PRIMARY;
	}

	@Override
	public List<UniqueKey<TbAccessLogRecord>> getKeys() {
		return Arrays.<UniqueKey<TbAccessLogRecord>>asList(Keys.KEY_TB_ACCESS_LOG_PRIMARY);
	}

	@Override
	public TbAccessLog as(String alias) {
		return new TbAccessLog(DSL.name(alias), this);
	}

	@Override
	public TbAccessLog as(Name alias) {
		return new TbAccessLog(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public TbAccessLog rename(String name) {
		return new TbAccessLog(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public TbAccessLog rename(Name name) {
		return new TbAccessLog(name, null);
	}

	// -------------------------------------------------------------------------
	// Row5 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row5<String, String, String, String, LocalDateTime> fieldsRow() {
		return (Row5)super.fieldsRow();
	}
}
