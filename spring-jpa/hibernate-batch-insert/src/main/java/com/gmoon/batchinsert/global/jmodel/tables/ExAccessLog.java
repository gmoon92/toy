/*
 * This file is generated by jOOQ.
 */
package com.gmoon.batchinsert.global.jmodel.tables;


import com.gmoon.batchinsert.global.jmodel.Batchinsert;
import com.gmoon.batchinsert.global.jmodel.Keys;
import com.gmoon.batchinsert.global.jmodel.tables.records.ExAccessLogRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.21",
        "schema version:4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExAccessLog extends TableImpl<ExAccessLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>batchinsert.ex_access_log</code>
     */
    public static final ExAccessLog EX_ACCESS_LOG = new ExAccessLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExAccessLogRecord> getRecordType() {
        return ExAccessLogRecord.class;
    }

    /**
     * The column <code>batchinsert.ex_access_log.id</code>.
     */
    public final TableField<ExAccessLogRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>batchinsert.ex_access_log.username</code>.
     */
    public final TableField<ExAccessLogRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>batchinsert.ex_access_log.ip</code>.
     */
    public final TableField<ExAccessLogRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>batchinsert.ex_access_log.os</code>.
     */
    public final TableField<ExAccessLogRecord, String> OS = createField(DSL.name("os"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>batchinsert.ex_access_log.attempt_dt</code>.
     */
    public final TableField<ExAccessLogRecord, String> ATTEMPT_DT = createField(DSL.name("attempt_dt"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private ExAccessLog(Name alias, Table<ExAccessLogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ExAccessLog(Name alias, Table<ExAccessLogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>batchinsert.ex_access_log</code> table reference
     */
    public ExAccessLog(String alias) {
        this(DSL.name(alias), EX_ACCESS_LOG);
    }

    /**
     * Create an aliased <code>batchinsert.ex_access_log</code> table reference
     */
    public ExAccessLog(Name alias) {
        this(alias, EX_ACCESS_LOG);
    }

    /**
     * Create a <code>batchinsert.ex_access_log</code> table reference
     */
    public ExAccessLog() {
        this(DSL.name("ex_access_log"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Batchinsert.BATCHINSERT;
    }

    @Override
    public UniqueKey<ExAccessLogRecord> getPrimaryKey() {
        return Keys.KEY_EX_ACCESS_LOG_PRIMARY;
    }

    @Override
    public ExAccessLog as(String alias) {
        return new ExAccessLog(DSL.name(alias), this);
    }

    @Override
    public ExAccessLog as(Name alias) {
        return new ExAccessLog(alias, this);
    }

    @Override
    public ExAccessLog as(Table<?> alias) {
        return new ExAccessLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExAccessLog rename(String name) {
        return new ExAccessLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExAccessLog rename(Name name) {
        return new ExAccessLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExAccessLog rename(Table<?> name) {
        return new ExAccessLog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExAccessLog where(Condition condition) {
        return new ExAccessLog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExAccessLog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExAccessLog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExAccessLog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExAccessLog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExAccessLog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExAccessLog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExAccessLog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExAccessLog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExAccessLog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
