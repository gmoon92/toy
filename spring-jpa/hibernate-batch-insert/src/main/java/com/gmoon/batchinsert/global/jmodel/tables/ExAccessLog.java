/*
 * This file is generated by jOOQ.
 */
package com.gmoon.batchinsert.global.jmodel.tables;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.gmoon.batchinsert.global.jmodel.Batchinsert;
import com.gmoon.batchinsert.global.jmodel.Keys;
import com.gmoon.batchinsert.global.jmodel.tables.records.ExAccessLogRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16",
        "schema version:3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExAccessLog extends TableImpl<ExAccessLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>batchinsert.ex_access_log</code>
     */
    public static final ExAccessLog EX_ACCESS_LOG = new ExAccessLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExAccessLogRecord> getRecordType() {
        return ExAccessLogRecord.class;
    }

    /**
     * The column <code>batchinsert.ex_access_log.id</code>.
     */
    public final TableField<ExAccessLogRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>batchinsert.ex_access_log.username</code>.
     */
    public final TableField<ExAccessLogRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>batchinsert.ex_access_log.ip</code>.
     */
    public final TableField<ExAccessLogRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>batchinsert.ex_access_log.os</code>.
     */
    public final TableField<ExAccessLogRecord, String> OS = createField(DSL.name("os"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>batchinsert.ex_access_log.attempt_dt</code>.
     */
    public final TableField<ExAccessLogRecord, String> ATTEMPT_DT = createField(DSL.name("attempt_dt"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private ExAccessLog(Name alias, Table<ExAccessLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExAccessLog(Name alias, Table<ExAccessLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>batchinsert.ex_access_log</code> table reference
     */
    public ExAccessLog(String alias) {
        this(DSL.name(alias), EX_ACCESS_LOG);
    }

    /**
     * Create an aliased <code>batchinsert.ex_access_log</code> table reference
     */
    public ExAccessLog(Name alias) {
        this(alias, EX_ACCESS_LOG);
    }

    /**
     * Create a <code>batchinsert.ex_access_log</code> table reference
     */
    public ExAccessLog() {
        this(DSL.name("ex_access_log"), null);
    }

    public <O extends Record> ExAccessLog(Table<O> child, ForeignKey<O, ExAccessLogRecord> key) {
        super(child, key, EX_ACCESS_LOG);
    }

    @Override
    public Schema getSchema() {
        return Batchinsert.BATCHINSERT;
    }

    @Override
    public UniqueKey<ExAccessLogRecord> getPrimaryKey() {
        return Keys.KEY_EX_ACCESS_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<ExAccessLogRecord>> getKeys() {
        return Arrays.<UniqueKey<ExAccessLogRecord>>asList(Keys.KEY_EX_ACCESS_LOG_PRIMARY);
    }

    @Override
    public ExAccessLog as(String alias) {
        return new ExAccessLog(DSL.name(alias), this);
    }

    @Override
    public ExAccessLog as(Name alias) {
        return new ExAccessLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExAccessLog rename(String name) {
        return new ExAccessLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExAccessLog rename(Name name) {
        return new ExAccessLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
